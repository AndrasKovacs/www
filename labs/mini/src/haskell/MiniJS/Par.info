-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.8 from MiniJS/Par.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pProgram -> Program                         (0)
	%start_pStm -> Stm                                 (1)
	%start_pListStm -> ListStm                         (2)
	%start_pExp2 -> Exp2                               (3)
	%start_pExp1 -> Exp1                               (4)
	%start_pExp -> Exp                                 (5)
	Ident -> L_ident                                   (6)
	Integer -> L_integ                                 (7)
	Double -> L_doubl                                  (8)
	Program -> ListStm                                 (9)
	Stm -> Ident '=' Exp                               (10)
	Stm -> 'console.log' '(' Exp ')'                   (11)
	ListStm ->                                         (12)
	ListStm -> ListStm Stm ';'                         (13)
	Exp2 -> Ident                                      (14)
	Exp2 -> Integer                                    (15)
	Exp2 -> Double                                     (16)
	Exp2 -> '(' Exp ')'                                (17)
	Exp1 -> Exp1 '*' Exp2                              (18)
	Exp1 -> Exp1 '/' Exp2                              (19)
	Exp1 -> Exp2                                       (20)
	Exp -> Exp '+' Exp1                                (21)
	Exp -> Exp '-' Exp1                                (22)
	Exp -> Exp1                                        (23)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'('            { PT _ (TS _ 1) }
	')'            { PT _ (TS _ 2) }
	'*'            { PT _ (TS _ 3) }
	'+'            { PT _ (TS _ 4) }
	'-'            { PT _ (TS _ 5) }
	'/'            { PT _ (TS _ 6) }
	';'            { PT _ (TS _ 7) }
	'='            { PT _ (TS _ 8) }
	'console.log'  { PT _ (TS _ 9) }
	L_ident        { PT _ (TV $$) }
	L_integ        { PT _ (TI $$) }
	L_doubl        { PT _ (TD $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pProgram rule  0
	%start_pStm     rule  1
	%start_pListStm rule  2
	%start_pExp2    rule  3
	%start_pExp1    rule  4
	%start_pExp     rule  5
	Ident           rule  6
	Integer         rule  7
	Double          rule  8
	Program         rule  9
	Stm             rules 10, 11
	ListStm         rules 12, 13
	Exp2            rules 14, 15, 16, 17
	Exp1            rules 18, 19, 20
	Exp             rules 21, 22, 23

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	'console.log'  reduce using rule 12
	L_ident        reduce using rule 12
	%eof           reduce using rule 12

	Program        goto state 23
	ListStm        goto state 24

State 1


	'console.log'  shift, and enter state 22
	L_ident        shift, and enter state 7

	Ident          goto state 20
	Stm            goto state 21

State 2


	'console.log'  reduce using rule 12
	L_ident        reduce using rule 12
	%eof           reduce using rule 12

	ListStm        goto state 19

State 3


	'('            shift, and enter state 14
	L_ident        shift, and enter state 7
	L_integ        shift, and enter state 15
	L_doubl        shift, and enter state 16

	Ident          goto state 8
	Integer        goto state 9
	Double         goto state 10
	Exp2           goto state 18

State 4


	'('            shift, and enter state 14
	L_ident        shift, and enter state 7
	L_integ        shift, and enter state 15
	L_doubl        shift, and enter state 16

	Ident          goto state 8
	Integer        goto state 9
	Double         goto state 10
	Exp2           goto state 11
	Exp1           goto state 17

State 5


	'('            shift, and enter state 14
	L_ident        shift, and enter state 7
	L_integ        shift, and enter state 15
	L_doubl        shift, and enter state 16

	Ident          goto state 8
	Integer        goto state 9
	Double         goto state 10
	Exp2           goto state 11
	Exp1           goto state 12
	Exp            goto state 13

State 6


	L_ident        shift, and enter state 7


State 7

	Ident -> L_ident .                                  (rule 6)

	')'            reduce using rule 6
	'*'            reduce using rule 6
	'+'            reduce using rule 6
	'-'            reduce using rule 6
	'/'            reduce using rule 6
	';'            reduce using rule 6
	'='            reduce using rule 6
	%eof           reduce using rule 6


State 8

	Exp2 -> Ident .                                     (rule 14)

	')'            reduce using rule 14
	'*'            reduce using rule 14
	'+'            reduce using rule 14
	'-'            reduce using rule 14
	'/'            reduce using rule 14
	';'            reduce using rule 14
	%eof           reduce using rule 14


State 9

	Exp2 -> Integer .                                   (rule 15)

	')'            reduce using rule 15
	'*'            reduce using rule 15
	'+'            reduce using rule 15
	'-'            reduce using rule 15
	'/'            reduce using rule 15
	';'            reduce using rule 15
	%eof           reduce using rule 15


State 10

	Exp2 -> Double .                                    (rule 16)

	')'            reduce using rule 16
	'*'            reduce using rule 16
	'+'            reduce using rule 16
	'-'            reduce using rule 16
	'/'            reduce using rule 16
	';'            reduce using rule 16
	%eof           reduce using rule 16


State 11

	Exp1 -> Exp2 .                                      (rule 20)

	')'            reduce using rule 20
	'*'            reduce using rule 20
	'+'            reduce using rule 20
	'-'            reduce using rule 20
	'/'            reduce using rule 20
	';'            reduce using rule 20
	%eof           reduce using rule 20


State 12

	Exp1 -> Exp1 . '*' Exp2                             (rule 18)
	Exp1 -> Exp1 . '/' Exp2                             (rule 19)
	Exp -> Exp1 .                                       (rule 23)

	')'            reduce using rule 23
	'*'            shift, and enter state 28
	'+'            reduce using rule 23
	'-'            reduce using rule 23
	'/'            shift, and enter state 29
	';'            reduce using rule 23
	%eof           reduce using rule 23


State 13

	%start_pExp -> Exp .                                (rule 5)
	Exp -> Exp . '+' Exp1                               (rule 21)
	Exp -> Exp . '-' Exp1                               (rule 22)

	'+'            shift, and enter state 31
	'-'            shift, and enter state 32
	%eof           accept


State 14

	Exp2 -> '(' . Exp ')'                               (rule 17)

	'('            shift, and enter state 14
	L_ident        shift, and enter state 7
	L_integ        shift, and enter state 15
	L_doubl        shift, and enter state 16

	Ident          goto state 8
	Integer        goto state 9
	Double         goto state 10
	Exp2           goto state 11
	Exp1           goto state 12
	Exp            goto state 30

State 15

	Integer -> L_integ .                                (rule 7)

	')'            reduce using rule 7
	'*'            reduce using rule 7
	'+'            reduce using rule 7
	'-'            reduce using rule 7
	'/'            reduce using rule 7
	';'            reduce using rule 7
	%eof           reduce using rule 7


State 16

	Double -> L_doubl .                                 (rule 8)

	')'            reduce using rule 8
	'*'            reduce using rule 8
	'+'            reduce using rule 8
	'-'            reduce using rule 8
	'/'            reduce using rule 8
	';'            reduce using rule 8
	%eof           reduce using rule 8


State 17

	%start_pExp1 -> Exp1 .                              (rule 4)
	Exp1 -> Exp1 . '*' Exp2                             (rule 18)
	Exp1 -> Exp1 . '/' Exp2                             (rule 19)

	'*'            shift, and enter state 28
	'/'            shift, and enter state 29
	%eof           accept


State 18

	%start_pExp2 -> Exp2 .                              (rule 3)

	%eof           accept


State 19

	%start_pListStm -> ListStm .                        (rule 2)
	ListStm -> ListStm . Stm ';'                        (rule 13)

	'console.log'  shift, and enter state 22
	L_ident        shift, and enter state 7
	%eof           accept

	Ident          goto state 20
	Stm            goto state 25

State 20

	Stm -> Ident . '=' Exp                              (rule 10)

	'='            shift, and enter state 27


State 21

	%start_pStm -> Stm .                                (rule 1)

	%eof           accept


State 22

	Stm -> 'console.log' . '(' Exp ')'                  (rule 11)

	'('            shift, and enter state 26


State 23

	%start_pProgram -> Program .                        (rule 0)

	%eof           accept


State 24

	Program -> ListStm .                                (rule 9)
	ListStm -> ListStm . Stm ';'                        (rule 13)

	'console.log'  shift, and enter state 22
	L_ident        shift, and enter state 7
	%eof           reduce using rule 9

	Ident          goto state 20
	Stm            goto state 25

State 25

	ListStm -> ListStm Stm . ';'                        (rule 13)

	';'            shift, and enter state 40


State 26

	Stm -> 'console.log' '(' . Exp ')'                  (rule 11)

	'('            shift, and enter state 14
	L_ident        shift, and enter state 7
	L_integ        shift, and enter state 15
	L_doubl        shift, and enter state 16

	Ident          goto state 8
	Integer        goto state 9
	Double         goto state 10
	Exp2           goto state 11
	Exp1           goto state 12
	Exp            goto state 39

State 27

	Stm -> Ident '=' . Exp                              (rule 10)

	'('            shift, and enter state 14
	L_ident        shift, and enter state 7
	L_integ        shift, and enter state 15
	L_doubl        shift, and enter state 16

	Ident          goto state 8
	Integer        goto state 9
	Double         goto state 10
	Exp2           goto state 11
	Exp1           goto state 12
	Exp            goto state 38

State 28

	Exp1 -> Exp1 '*' . Exp2                             (rule 18)

	'('            shift, and enter state 14
	L_ident        shift, and enter state 7
	L_integ        shift, and enter state 15
	L_doubl        shift, and enter state 16

	Ident          goto state 8
	Integer        goto state 9
	Double         goto state 10
	Exp2           goto state 37

State 29

	Exp1 -> Exp1 '/' . Exp2                             (rule 19)

	'('            shift, and enter state 14
	L_ident        shift, and enter state 7
	L_integ        shift, and enter state 15
	L_doubl        shift, and enter state 16

	Ident          goto state 8
	Integer        goto state 9
	Double         goto state 10
	Exp2           goto state 36

State 30

	Exp2 -> '(' Exp . ')'                               (rule 17)
	Exp -> Exp . '+' Exp1                               (rule 21)
	Exp -> Exp . '-' Exp1                               (rule 22)

	')'            shift, and enter state 35
	'+'            shift, and enter state 31
	'-'            shift, and enter state 32


State 31

	Exp -> Exp '+' . Exp1                               (rule 21)

	'('            shift, and enter state 14
	L_ident        shift, and enter state 7
	L_integ        shift, and enter state 15
	L_doubl        shift, and enter state 16

	Ident          goto state 8
	Integer        goto state 9
	Double         goto state 10
	Exp2           goto state 11
	Exp1           goto state 34

State 32

	Exp -> Exp '-' . Exp1                               (rule 22)

	'('            shift, and enter state 14
	L_ident        shift, and enter state 7
	L_integ        shift, and enter state 15
	L_doubl        shift, and enter state 16

	Ident          goto state 8
	Integer        goto state 9
	Double         goto state 10
	Exp2           goto state 11
	Exp1           goto state 33

State 33

	Exp1 -> Exp1 . '*' Exp2                             (rule 18)
	Exp1 -> Exp1 . '/' Exp2                             (rule 19)
	Exp -> Exp '-' Exp1 .                               (rule 22)

	')'            reduce using rule 22
	'*'            shift, and enter state 28
	'+'            reduce using rule 22
	'-'            reduce using rule 22
	'/'            shift, and enter state 29
	';'            reduce using rule 22
	%eof           reduce using rule 22


State 34

	Exp1 -> Exp1 . '*' Exp2                             (rule 18)
	Exp1 -> Exp1 . '/' Exp2                             (rule 19)
	Exp -> Exp '+' Exp1 .                               (rule 21)

	')'            reduce using rule 21
	'*'            shift, and enter state 28
	'+'            reduce using rule 21
	'-'            reduce using rule 21
	'/'            shift, and enter state 29
	';'            reduce using rule 21
	%eof           reduce using rule 21


State 35

	Exp2 -> '(' Exp ')' .                               (rule 17)

	')'            reduce using rule 17
	'*'            reduce using rule 17
	'+'            reduce using rule 17
	'-'            reduce using rule 17
	'/'            reduce using rule 17
	';'            reduce using rule 17
	%eof           reduce using rule 17


State 36

	Exp1 -> Exp1 '/' Exp2 .                             (rule 19)

	')'            reduce using rule 19
	'*'            reduce using rule 19
	'+'            reduce using rule 19
	'-'            reduce using rule 19
	'/'            reduce using rule 19
	';'            reduce using rule 19
	%eof           reduce using rule 19


State 37

	Exp1 -> Exp1 '*' Exp2 .                             (rule 18)

	')'            reduce using rule 18
	'*'            reduce using rule 18
	'+'            reduce using rule 18
	'-'            reduce using rule 18
	'/'            reduce using rule 18
	';'            reduce using rule 18
	%eof           reduce using rule 18


State 38

	Stm -> Ident '=' Exp .                              (rule 10)
	Exp -> Exp . '+' Exp1                               (rule 21)
	Exp -> Exp . '-' Exp1                               (rule 22)

	'+'            shift, and enter state 31
	'-'            shift, and enter state 32
	';'            reduce using rule 10
	%eof           reduce using rule 10


State 39

	Stm -> 'console.log' '(' Exp . ')'                  (rule 11)
	Exp -> Exp . '+' Exp1                               (rule 21)
	Exp -> Exp . '-' Exp1                               (rule 22)

	')'            shift, and enter state 41
	'+'            shift, and enter state 31
	'-'            shift, and enter state 32


State 40

	ListStm -> ListStm Stm ';' .                        (rule 13)

	'console.log'  reduce using rule 13
	L_ident        reduce using rule 13
	%eof           reduce using rule 13


State 41

	Stm -> 'console.log' '(' Exp ')' .                  (rule 11)

	';'            reduce using rule 11
	%eof           reduce using rule 11


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 24
Number of terminals: 12
Number of non-terminals: 15
Number of states: 42
