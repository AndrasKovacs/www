Programming Language Technology
DAT151 (Chalmers) / DIT231 (GU)
Winter Term 2023 (LP2)

%!target:html
%!encoding:utf-8

'''
<script src="enhance_page.js" type="text/javascript"></script>
<style>.github-fork-ribbon:before { background-color: #333; }</style>
<a class="github-fork-ribbon" href="https://github.com/teach-plt/www" data-ribbon="Sources on GitHub" title="Sources on GitHub">Sources on GitHub</a>
<p align="center">
<a href="https://teach-plt.github.io/www/">https://teach-plt.github.io/www/</a>
</p>
'''

% [Fire https://plt-lp2-23.fire.cse.chalmers.se/]
% /
[Canvas https://chalmers.instructure.com/courses/26247]
/
[GitLab https://git.chalmers.se/courses/dat151]
/
[Schedule https://cloud.timeedit.net/chalmers/web/public/ri1Y03y5Z65ZZ7Q7766657015Q06x3500gW650QQ537.html]
/
[Slack https://plt2023lp2.slack.com]
/
[Chalmers studieportal https://www.student.chalmers.se/sp/course?course_id=35818]
% https://www.student.chalmers.se/sp/course?course_id=33079]
% https://www.student.chalmers.se/sp/course?course_id=32788]
% 31181]
% https://www.student.chalmers.se/sp/course?course_id=29075
% https://www.student.chalmers.se/sp/course?course_id=27798
% https://www.student.chalmers.se/sp/course?course_id=26971
% https://www.student.chalmers.se/sp/course?course_id=24933
% https://www.student.chalmers.se/sp/course?course_id=23453
% https://www.student.chalmers.se/sp/course?course_id=21767
/
% [GU course page stub https://gul.gu.se/courseId/85497/contentStart.do]
% https://gul.gu.se/public/courseId/79766/coursePath/38212/38407/40149/ecp/lang-sv/publicPage.do]
% /
[GU ad (sv) https://www.gu.se/studera/hitta-utbildning/programspraksteknik-dit231]
% http://utbildning.gu.se/education/courses-and-programmes/Course_detail?courseId=DIT231
/
[GU kursplan http://kursplaner.gu.se/pdf/kurs/sv/DIT231]
/
[GU course description http://kursplaner.gu.se/pdf/kurs/en/DIT231]
/
[Course page 2022 http://www.cse.chalmers.se/edu/year/2022/course/DAT151/]


=News and changes=

%   : //2022-08-23//
%    The second reexam will be held 26 August on Canvas organized as
%    [course 17081 https://chalmers.instructure.com/courses/17081].
%    If you registered to the exam, you should have gotten an invitation
%    to this course.  Please read the instructions there.

%   : //2022-04-06//
%     The first re-exam will be held 8 April 2022 on Canvas organized as
%     [course 14779 https://chalmers.instructure.com/courses/14779].
%     If you registered to the exam, you should have gotten an invitation
%     to this course.  Please read the instructions there.

% % % : //2019-03-22//
% % %   The Fire deadline for late submission has been extended until
% % %   Sunday 25th.

% %   : //2020-04-05//
% %    The reexam will be held 7 April on Canvas organized as
% %    [course 9969 https://chalmers.instructure.com/courses/9969].
% %    If you registered to the exam, you should have gotten an invitation
% %    to this course.  Please read the instructions there.

% : //2023-03-01//
%   Fire is open for the late submission of labs.  Deadline: **2023-04-04**.

% %  : //2020-01-25//
% %    The deadline for all labs has been extended to 10th February.

%   : //2020-02-01//
%     Exam review will be Tue 2 Feb 13.30 on Zoom.
%     [More info and link on Canvas https://chalmers.instructure.com/courses/13801/discussion_topics/54505].

% %    Deadline extension:
% %    Lab 4 submission on Fire is now possible until the final deadline (23rd Jan).

% % %   I am very pleased with the outcome, thanks for studying well!

% % %   Please submit outstanding lab solutions by Friday!

% : //2023-01-19//
%   Remember the final lab deadline on Friday 28th of January 2023.
%   The last supervision sessions (Zoom only) are offered Tuesday 25th and Wednesday 26th 15.15-17.00.

% : //2023-01-19//
%   The exam got 90 submissions, with many excellent ones!
%   [Exam text exams/exam-plt-2023-1.pdf] and [solution exams/solutions-plt-2023-1.pdf].

%   Exam review will be held Monday 24 January 2023 13:30-15:00 in EDIT 6128.
%   If you are not able to show up in person, please email the course responsible
%   with subject "PLT 2023 exam review".
%   If this is during the exam review time, please also supply a zoom link, so that a remote
%   review can be facilitated on the spot.

%   : //2022-01-08//
%     The exam will be held 11 January on Canvas organized as
%     [course 13801 https://chalmers.instructure.com/courses/13801].
%     If you registered to the exam, you should have gotten an invitation
%     to this course.  Please read the instructions there.

%     Since the exam is open-book instead of the usual closed-book,
%     the style will be different, see last year's
%     [reexam exams/exam-plt-2020-2.pdf] and [solution exams/solutions-plt-2020-2.pdf].
%     You'll notice some questions that require you to write a
%     self-contained specification of a procedure
%     (e.g. interpreter or compiler).

% % % : //2017-12-19//
% % %   The exam will be held 8 January 2019, 8.30-12.30 in building M on the Johanneberg campus.

% %  : //2019-12-18//
% %    In the last lecture, we will walk through an
% %    [example exam exams/exam-plt-2017-3.pdf].

% %  : //2019-12-18//
% %    The live code for "hands on lab4" contains too much of the solution, thus, will not be published.  See the PLT book chapter 7.6 and this [Canvas post https://chalmers.instructure.com/courses/7185/discussion_topics/13646] for advice on the implementation.

% %  : //2019-12-17//
% %    Live coding in Agda [start live/2019/live-13-JVM-start.agda] and [finish live/2019/live-13-JVM-finish.agda]
% %    on verified compilation.

% % %  : //2019-12-16//
% % %    [Lab 4 stubs labs/lab4/index.html#section3] for Haskell and Java are now available.

% %  : //2019-12-12//
% %    A bug that caused some test (e.g. the tests in the subtyping directory) to not run has been fixed in the lab 3 test suite. Please re-download the test suite.

%  : //2020-12-08//
%    The flawed `runExec` function has been fixed in the [monads script notes/monads.html].

%  : //2020-11-21//
%    A [script notes/monads.md] about the implementation of the interpreter in Haskell. This completes and extends the hints given in the plt book, and contains a tutorial on monads and monad transformers.

%  : //2020-11-20//
%    [Lab 4 labs/lab4/index.html] description is online.

%  : //2020-11-20//
%    The [testsuite runner labs/lab2/testsuite/progs-test-lab2.hs] for lab2
%    has been relaxed to look for ``TYPE ERROR`` and ``INTERPRETER ERROR``
%    anywhere in ``stdout`` and ``stderr``.

% % %  : //2019-12-05//
% % %    **Guest lecture** by [Thorsten Berger http://www.cse.chalmers.se/~bergert/]
% % %    on domain-specific languages tomorrow, 2019-12-06!
% % %    He will present a software-engineering perspective on PLT.
% % %    (Schedule updated.)
% % %    //2019-12-10//: [Slides available http://www.cse.chalmers.se/~bergert/slides/guest_lecture_DSLs.pdf]

% %  : //2019-12-03//
% %    The test suite for lab 3 now includes a ``good/subtyping``
% %    directory that contains tests for handling subtyping correctly.

% %    The code from today's "Hands-on for lab 3" session is [online live/2019/live-9-lab3.zip] (Haskell and Java).
% %    (Note: should compile, but does not run!)

%  : //2020-11-17//
%    [Lab 3 labs/lab3/index.html] description is online.
%
%  : //2022-11-24//
%    The deadline for lab 2 has been extended to Wed 30 Nov 2022 midnight.
%
%  : //2022-11-22//
%    The code from today's "Hands-on for lab 2" session is online: [Haskell live/2022/live-7-lab2-haskell.zip] and [Java live/2022/live-7-lab2-java.zip].
%
%  : //2020-11-17//
%    The [script notes/type-checking.md] for lecture 5 (type checking) has been updated
%    to incorporate the changes made in the lecture.

%  : //2020-11-13//
%    [Lab 2 labs/lab2/index.html] description is online.

%    It differs from the 2019 version in that an //annotating// type checker is needed.

% %  : //2019-11-22//
% %    For lab2, we clarified in the lab text that there is no need to type annotate the code during type checking. Annotations will become relevant first in lab3.
% %    We also added test cases for error reporting of unused variables (see the directory ``bad-runtime``).

% %  : //2019-11-14//
% %    The parse table on page 53 of the plt book is incomplete, missing the goto actions.
% %    See instead a //happy// generated [LR parse table live/2019/LR-parsetable.txt] for
% %    this [LBNF grammar live/2019/LR.cf].

% % % %  : //2017-11-07//
% % % %    No lecture on Thursday, 9th November!
% % % %    You are free to attend the [DATE-IT 2017 company contact fair https://www.date-it.se/].
% % % %    Lab session will take place!
% % % %

% % %  : //2019-11-07//
% % %    Ad: [Apply for undergraduate teaching assistent LP3/4! https://www.gu.se/english/about_the_university/job-opportunities/vacancies-details/?id=3345]
% % %    Deadline is 2019-11-30.


% %  : //2019-11-07//
% %    [MiniJS labs/mini/index.html] implementation in Haskell and Java.

% : //2022-11-17//
%   Tuesday lectures on 2 dates, 2022-11-23 (next week) and 2022-12-14 (final Tuesday lecture)
%   will take place in
%   **[SB-H1 http://maps.chalmers.se/#56936c80-6cb7-4a3e-be43-4c6458006683]** (210 seats!).

% : //2022-11-15//
%   Tuesday lecture (2022-11-16) in **HB3**.

% : //2022-11-03//
%   Stub for today's live coding [online live/2022/live-2-bnfc-start.zip].

% : //2022-11-03//
%   Until further notice, lectures will be streamed on Zoom (link see Canvas).
%   On-campus attendance is recommended though, for a better lecture experience and better interaction.

%   : //2020-11-02//
%    [Lab 1 labs/lab1/index.html] description is online.

%    Labs are done in groups of 2.  Please look for a lab partner.
%   Lab supervision is available both via Zoom and in ED3354.
%   Queueing is via [Waglys https://www.waglys.com/bonlYD] in both cases.
%   Details see below.

: //2023-10-31//

  The lecture hall HC2 of todays's lecture has only 104 seats.
  Thus, I will offer streaming of this lecture via Zoom (hybrid format).
  You are welcome to join via Zoom in case you cannot or do not want to attend in person
  (e.g. if you shy crowds these days, or have symptoms etc).
  Zoom link will be published via [Canvas https://chalmers.instructure.com/courses/26247].

%  : //2022-10-31//
%    First published version of this page.
% - mostly a copy of the 2018 material.  Updates forthcoming soon.


=Schedule=

% Lectures take place on Zoom, link see [Canvas https://chalmers.instructure.com/courses/26247].

Lectures are Tuesdays and Thursdays, starting at **13:15**, both on campus and in [Zoom https://chalmers.instructure.com/courses/26247/external_tools/419].
Tuesday lectures are in **[HC2 http://maps.chalmers.se/#23e2df72-cbb9-4aff-825a-1a282e9618d6]**,
Thursday lectures in
**[SB-H6 https://maps.chalmers.se/#c613d487-6c0c-4fe2-8a9d-55b858fa137f]**,
//with exceptions// Thu 2nd Nov and 23rd Nov in //[SB-H5 https://maps.chalmers.se/#f85ee0cd-e87b-403f-acf9-bd30f6b3339d]//.
% and Thu 23rd Nov in //[SB-H1 https://maps.chalmers.se/#56936c80-6cb7-4a3e-be43-4c6458006683]//),
% **[HA1 http://maps.chalmers.se/#971e00c6-6f9a-46ce-9894-687adb1fa8ea]**,


Material: plt = course book, dragon = Dragon book.
Slides follow closely the plt book.


|| Date         | Time           | Title                             | Material                      ||
| Tue 31/10     | 13-15          | PL Design, Compilation Phases | [slides plt-book/ipl-book/slides/1-slides-ipl-book.pdf], plt 1, dragon 1
% , live coding [start live/2023/live-1-Calc-bnfc-start.zip]
%, live coding [Calc live/2023/live-1-Calc-bnfc.zip]
% , [MiniJS labs/mini/index.html]
%, live coding [start live/2019/live-1-mini-start.zip] [lecture live/2019/live-1-as-far-as-we-got.zip] [finish live/2019/live-1-mini-finish.zip]
%, [live coding live/2018/lec1-happy-live-2018.zip]
| Thu 02/11     | 13-15 **[SB-H5 https://maps.chalmers.se/#f85ee0cd-e87b-403f-acf9-bd30f6b3339d]**  | Grammars / BNFC / Hands-on with Lab 1    | [slides plt-book/ipl-book/slides/2-slides-ipl-book.pdf], plt 2, dragon 2.8.2,4.1-4.3, [git notes/git-primer.md]
%, live coding [start live/2023/live-2-bnfc-start.zip] |
| Tue 07/11     | 13-15          | Formal languages and parsing                  | [slides plt-book/ipl-book/slides/3-slides-ipl-book.pdf], plt 3, dragon 3,4, [shift-reduce parsing notes/sr-states.md] [LR-table notes/LR-table.html]
% [LL parser code live/2021/LL-parsing.zip] |
%[LR parse table live/2019/LR-parsetable.txt] for [grammar live/2019/LR.cf] |
%| Thu 09/11     | 10-16       | [DATE-IT 2017 fair https://www.date-it.se/] | No class! |
| Thu 09/11     | 13-15          | Theory of lexing    | [slides plt-book/ipl-book/slides/3-slides-ipl-book.pdf], plt 3, dragon 3,4
| //Mon 13/11// | //23//         | //Lab 1 deadline//                |  |
%[lab1 PM labs/lab1/index.html] |
%| Tue 14/11     | 13-15          | Theory of lexing, LR parsing  | [slides plt-book/ipl-book/slides/3-slides-ipl-book.pdf], plt 3, dragon 3,4
| Tue 14/11     | 13-15  *       | Type checking                     | [slides plt-book/ipl-book/slides/4-slides-ipl-book.pdf], plt 4, dragon 5,6, [script notes/type-checking.html] [prime.c notes/prime.c] |
| Thu 16/11     | 13-15          | Interpreting                      | [slides plt-book/ipl-book/slides/5-slides-ipl-book.pdf], plt 5, [script notes/interpreter.html] |
| Tue 21/11     | 13-14          | Hands-on with Lab 2 (Haskell)  //(lecture: ??)//   | [live coding live/2023/live-7-lab2-haskell.zip] |
%[lab2 PM labs/lab2/index.html] [script notes/monads.html] [Monads https://homepages.inf.ed.ac.uk/wadler/papers/marktoberdorf/baastad.pdf] |
| Tue 21/11     | 14-15          | Hands-on with Lab 2 (Java)     //(lecture: ??)//   | [live coding live/2023/live-7-lab2-java.zip] |
%[live coding live/2019/live-7-lab2.zip] |
%| Thu 23/11     | 13-14          | Hands-on with Lab 2 (Haskell)     |  |
%[lab2 PM labs/lab2/index.html]
%| Thu 23/11     | 14-15 **[SB-H1 https://maps.chalmers.se/#56936c80-6cb7-4a3e-be43-4c6458006683]**  | Hands-on with Lab 2 (Java)        |  |
| Thu 23/11     | 13-15  **SB-H5**        | Code generation  //(lecture: ??)//                 | [slides plt-book/ipl-book/slides/6-slides-ipl-book.pdf], plt 6, dragon 6,7, [notes notes/compilation.html], [prime.c notes/prime.c], [prime.j notes/prime.j]
| //Mon 27/11// | //23//         | //Lab 2 deadline//                |  |
%[lab2 PM labs/lab2/index.html] |
%| Tue 28/11     | 13-15          | Code generation                   | [slides plt-book/ipl-book/slides/6-slides-ipl-book.pdf], plt 6, dragon 6,7, [script notes/compilation.html]
| Tue 28/11    | 13-14          | Hands-on with Lab 3 (Haskell)     |  |
%[live code (diff) live/2023/live-9-lab3-haskell.diff] |
%[lab3 PM labs/lab3/index.html]
| Tue 28/11     | 14-15          | Hands-on with Lab 3 (Java)        |  |
%[live code (diff) live/2023/live-9-lab3-java.diff] |
%[live coding live/2019/live-9-lab3.zip] |
%| Thu 30/11     | 13-14          | Hands-on with Lab 3 (Haskell)     |  |
%[lab3 PM labs/lab3/index.html]
%| Thu 30/11     | 14-15          | Hands-on with Lab 3 (Java)        |  |
%| Thu 30/11     | 13-15          | [Domain-specific languages http://www.cse.chalmers.se/~bergert/slides/guest_lecture_DSLs.pdf]  | Guest lecture by [Thorsten Berger http://www.cse.chalmers.se/~bergert/]
| Thu 30/11     | 13-15          | Functional programming languages  | [slides plt-book/ipl-book/slides/7-slides-ipl-book.pdf], plt 7, dragon 6.5,7.3, [script notes/cbn-cbv.html]
%| Tue 05/12     | 13-15          | Functional programming languages  | [slides plt-book/ipl-book/slides/7-slides-ipl-book.pdf], plt 7, dragon 6.5,7.3
% %| Tue 05/12     | 13-15          | The language design space         | [slides plt-book/ipl-book/slides/8-slides-ipl-book.pdf], plt 8, dragon 1.
| Tue 05/12     | 13-15          | Type inference and polymorphism   | plt 7.7-9, [script notes/typing.html]
| Thu 07/12     | 13-14          | Hands-on with Lab 4 (Haskell)     |  |
%diff [start live/2023/live-12-lab4-haskell-start.diff] [live live/2023/live-12-lab4-haskell-finish.diff] |
%live code [start live/2020/hands-on-4-haskell-start.tgz]  [finish live/2020/hands-on-4-haskell-finish.tgz] |
| Thu 07/12     | 14-15          | Hands-on with Lab 4 (Java)        |  |
%diff [start live/2023/live-12-lab4-java-start.diff] [live live/2023/live-12-lab4-java-finish.diff] |
%live code [start live/2020/hands-on-4-java-start.tgz] [finish live/2020/hands-on-4-java-finish.tgz] |
%[lab4 PM labs/lab4/index.html]
%| //Mon 11/12// | //23//         | //Lab 3 deadline//                |  |
| Tue 12/12     | 13-15          | Type inference. A taste of dependent types | Agda demo [Verified compilation ./JVM.agda] |
%| Tue 12/12     | 13-15 | Dependent types (Agda) [video https://chalmers.instructure.com/courses/21130/external_tools/29]  | "Live" coding [start live/2020/JVM-start.agda]  |
% [stop live/2020/JVM.agda] |
%and [finish live/2019/live-13-JVM-finish.agda] |
%Live coding [start live/2019/live-13-JVM-start.agda] and [finish live/2019/live-13-JVM-finish.agda] |
% Agda demo [start ./BidirectionalTypeChecking-stub.agda] [finish ./BidirectionalTypeChecking.agda] |
| //Wed 13/12// | //23//         | //Lab 3 deadline//                |  |
| Thu 14/12     | 13-15          | Preparing for the exam            |  |
% [video https://chalmers.instructure.com/courses/21130/external_tools/29]  | [Training exam exams/exam-plt-2020-1.pdf] [Solution exams/solutions-plt-2020-1.pdf] [Answer Q1 live/2021/exam/CMM.cf] [Q1.c live/2021/exam/Q1.c] [Answer Q3-6 live/2021/exam/Answers.md]  |
|| 2024 ||||
| //Mon 08/01// | //23//         | //Lab 4 deadline//                |  |
| //Thu 11/01// | //8.30-12.30// | //Exam//             |  |
%[Exam exams/exam-plt-2024-1.pdf] |
%| //Mon 22/01// | //14.30-15.30// | //Exam review (EDIT 6128)// | [Solution exams/solutions-plt-2024-1.pdf] |
| //Fri 26/01// | //23//         | //Final lab deadline//            | //all lab returns//
%| //Fri 26/01// | //10-11// | //Exam review, EDIT 6128// | [Solution exams/solutions-plt-2018-1.pdf] |
%| //Fri 22/03// |                | //Lab resubmission intent deadline//       |  |
%| //Mon 01/04// |                | //Late final lab deadline//       |  |
| //Thu 04/04// | //8.30-12.30// | //First reexam// |  |
% ([Canvas https://chalmers.instructure.com/courses/14779])// |  |
% //Exam (Canvas)//                      |  |
%| //Wed 17/04// | //11.00-12.00// | //Exam review (EDIT 6128)// |  |
% [Solution exams/solutions-plt-2024-2.pdf] |
| //Thu 29/08// | //14-18//      | //Second reexam// |  |
% ([Canvas https://chalmers.instructure.com/courses/12065])                      |  |
% //[Solution exams/solutions-plt-2017-3.pdf]// |
%| //Tue 10/09// | //13.30//      | //Exam review//                  |  |

The official course schema is in [Time Edit https://cloud.timeedit.net/chalmers/web/public/ri1Y03y5Z65ZZ7Q7766657015Q06x3500gW650QQ537.html].
% https://cloud.timeedit.net/chalmers/web/public/ri1Y73yQZ05ZZ3Q7X96v9Q015Q0Yx30YfgQ6.html].
% https://cloud.timeedit.net/chalmers/web/public/ri1Y23y5Z65ZZ0Q7566655015Q06x3500gW650QQ537.html].
% https://cloud.timeedit.net/chalmers_test/web/public/ri10Q653575007QQ51ZZ756005yYW56376306008Q650.html].
% https://cloud.timeedit.net/chalmers/web/public/ri1f7XYQ63ZZ3YQvQc076310y5Y6057Zq7QQ.html].
% https://cloud.timeedit.net/chalmers/web/public/ri107355X61Z56Q5Z36g0Y65yZ036Y31Q07gQY5Q5576q573cQ.html
% https://se.timeedit.net/web/chalmers/db1/public/ri177255X90Z56Q5Z36g0Y65yZ036Y31Q07gQY5Q5076q072cQ.html
% https://se.timeedit.net/web/chalmers/db1/public/ri10q29Q054Z5ZQ505663750yc065W7362Y63Q0Q7571QZ.html].



=Description=

The aim of the course is to give understanding of how programming
languages are designed, documented, and implemented. The course covers
the basic techniques and tools needed to write interpreters, and
gives a summary introduction to compilation as well.  Those who have
passed the course should be able to
+ define the lexical structure of programming languages by using
  regular expressions, explain the functioning of finite automata,
  and implement lexical analysers by using standard tools;
+ define the syntax of programming languages by using context-free
  grammars, explain the principles of LL and LR parsing, and implement
  parsers by using standard tools;
+ define and implement abstract syntax;
+ master the technique of syntax-directed translation and its
  efficient implementation in their chosen programming language;
+ formulate typing rules and implement type checkers;
+ formulate operational semantic rules and implement interpreters;
+ write simple code generators;
+ be familiar with the basic implementation issues of both
  imperative and functional languages;
+ master the principles of polymorphic type checking by unification;
+ implement an interpreter for a functional language.


=Teachers=

[Andreas Abel http://www.cse.chalmers.se/~abela/], responsible course teacher and examiner.

%[Fredrik Lindblad https://www.chalmers.se/en/staff/Pages/fredrik-lindblad.aspx], contact and lectures.

% John Camilleri,
% Mauricio Chimento,
% Inari Listenmaa,
% [Daniel Hausknecht https://danielhausknecht.eu],
% [Daniel Schoepe https://schoepe.org/~daniel/],
% [Iulia Bastys https://www.chalmers.se/en/staff/Pages/bastys.aspx],
% [Fabian Ruch (FR) https://www.chalmers.se/en/staff/Pages/fabian-ruch.aspx],
% [Andreas Lööw (AL) http://www.cse.chalmers.se/~loow/]
%- [Oskar Abrahamsson (OA) https://www.chalmers.se/en/staff/Pages/oskar-abrahamsson.aspx]
%- [Shreyash Kad (SK) https://se.linkedin.com/in/shreyash-kad], ``shreyash student chalmers se`` //(insert @ and .)//
%- Anna Romeborn (AR), ``romeborn student chalmers se`` //(insert @ and .)//
Assistants:
%- [Mohammad Ahmadpanah https://www.chalmers.se/en/Staff/Pages/mohammad-ahmadpanah.aspx]
%- [Prabhat Kumar Jha https://www.chalmers.se/en/staff/Pages/prabhar.aspx]
%- [Robert Krook https://www.chalmers.se/en/staff/Pages/krookr.aspx]
- [Andras Kovacs https://www.chalmers.se/personer/andrask/]
- [Eric Olsson https://www.chalmers.se/personer/laro.aspx]
- [Felix Cherubini https://www.chalmers.se/personer/felixche/]
- [Hao Hu https://github.com/himmelhao] ``haohu student chalmers se`` //(insert @ and .)//
- [Jonas Höfer https://www.chalmers.se/personer/hoferj/]

Questions regarding this class (organization, content, labs)
should be asked publicly on the Canvas forum in the most cases.
You are also welcome to answer questions by others.
(Don't give away any lab solutions when you ask or answer questions!)


% =Google Group=

% If you have any general questions regarding the course, the labs or the exercises,
% please ask them in our
% [Google group http://groups.google.com/group/plt-2019].
% This will reach all teachers and fellow students.
% If you are not yet member of the group, you have to
% - get a google account (if you don't have it yet)
% - go to http://groups.google.com/group/plt-2019
% - request an invitation to the plt-2019 group (make sure to use "apply for membership" rather than "contact the owner")


% **You will have to give your real name and your person number (or date of birth) when you register, otherwise your membership is not approved.**
% This is necessary to identify you as a participant of the course.
% Please also indicate whether you are GU or Chalmers student.

=Lab times and supervision=

% Lab supervision workflow: Start a Zoom meeting and invite your group partner to join. To ask for help, sign up on the [Waglys digital waiting list https://www.waglys.com/bonlYD] with your 10-digit Zoom ID (as "6435657890" from "https://chalmers.zoom.us/j/6435657890"), so that the TAs know where to find you. Please make sure your meeting does **not** require password to get in. A TA will join your Zoom meeting as soon as it's your turn.

% Waglys sucks!
% - No alerts when new requests come in.
% - No feedback when one forgets to unlock the queue.
% - No communication possibilities when the students make a mistake, e.g. a password protected zoom session.
%
% In the future, just a zoom session where students are taken to breakout rooms seems more robust.
% Students can draw a "nummerlap" by putting their supervision request on the chat.

Lab supervision is available in room [ED3354 http://maps.chalmers.se/#45ea04d0-4a90-4a18-9842-55599dbbb093] and online on Tue, Thu and Fri.
|| Day | Time        | Location     | Supervisors       |
 | Tue | 15:15-17:00 | Zoom, ED3354 | |
 | Wed | 15:15-17:00 | Zoom only    | |
 | Thu | 15:15-17:00 | Zoom, ED3354 | |
 | Fri | 13:15-15:00 | Zoom, ED3354 | |


The lab rooms and supervision are
% Supervision is
available from Tue 31 Oct till Fri 15 Dec 2023,
except for Fri 03 Nov which is a half-day.
%Extra supervision sessions (Zoom) are planned for January 2024, 15:15-17:00, at the following days:
%Tue 17th, Wed 18th, Jan 24th, Jan 25th.

% **Attendance in these classes is optional**.
% Normally, each student should attend **at most one** supervised lab time each week.
% Since attendance is not compulsory, there may be room for more
% times. But, if there is lack of room, those who attend their first
% supervision of the week have priority to get a place and supervisor help.

We use [Slack https://plt2023lp2.slack.com/] to organize the lab supervision.
Please [join https://join.slack.com/t/plt2023lp2/shared_invite/zt-25dk1rfup-acG09TxebCQGjepXhnNX3A]
our Slack workspace.

The TAs will be present in lab rooms during lab supervision slots, available for help both in-person and virtually. To ask for help,  just send a ticket request through the ``#queue`` Slack channel.
- For in-person attendance, writing your names is sufficient.
- For online help, start a Zoom meeting and invite your group partner to join.
  Please then sign up by providing a clickable URL to your Zoom meeting (e.g., ``https://chalmers.zoom.us/j/6435657890/pwd=OXlBcGxMZjkzNGsyplpYZENYWlVodi09``), so that the TA knows where to find you.
- Monitor the queue, the TA will join you/your Zoom meeting as soon as it’s your turn.


You are expected to find a lab partner, with whom you will do the labs.
If you have difficulties finding a partner, please use Slack channel ``#lab-partner``.





=Labs=

You have to pass the labs to pass the course.
However, the course grade is determined solely by the exam.
- Lab 1 - parser  (deadline 13/11)
% - [Lab 1 - parser labs/lab1/index.html] (deadline 13/11)
- Lab 2 - type checker and interpreter (deadline 27/11)
% - [Lab 2 - type checker and interpreter labs/lab2/index.html] (deadline 27/11)
- Lab 3 - code generator (deadline 13/12)
% - [Lab 3 - code generator labs/lab3/index.html] (deadline 13/12)
- Lab 4 - functional language interpreter  (deadline 08/01/2024)
% - [Lab 4 - functional language interpreter labs/lab4/index.html] (deadline 08/01/2024)


The labs are quite substantial, so please set aside at least 30 full working hours (4 full working days) before the deadline.  It is recommended to start at least 10 days before the deadline.

Labs are to be solved in **groups of two**.
(Individual solutions are accepted per exception,
please contact the course responsible.)
Groups are formed on Canvas and then recreated automatically on
[Chalmers GitLab https://git.chalmers.se/courses/dat151].
After the first lab has been submitted, the groups are fixed.
(Should you nevertheless need to urgently change to group,
please contact the course responsible.)

The labs will be published in your Gitlab group and a solution repository will be created for you there.
Submission of your solution is by creating a ``submission`` tag in the repository.
Please read the detailed **lab instructions** at:
https://chalmers.instructure.com/courses/26247/pages/lab-infrastructure-on-chalmers-gitlab

%**Lab submission instructions to be decided!**
%Come back here for the lab submission instructions.

Keep your lab solutions confidential!
If you post problems and discussions around the labs on Canvas etc.,
make sure you do not give away the solution.


% It is recommended to use a version control system like [git https://git-scm.com/] for
% code development.  In case you use cloud-based code hosting like, e.g.,
% [GitLab https://gitlab.com],
% [GitHub https://github.com], or
% [Bitbucket https://bitbucket.org],
% make sure your repository is __private__ to not give away your lab
% solution.  (Along the same lines, never post your solution on public
% fora and mailing lists!)

% Reporting is done via [Fire https://plt-lp2-23.fire.cse.chalmers.se/].
% Before submitting your solution, run your program through the provided **test suite**.
% Also, make sure that your submission contains all necessary files
% and the **build succeeds**.  For instance, if you are submitting an archive,
% unpack the archive in a fresh directory and check the build there.

We guarantee two gradings per lab: one for the version submitted before the
ordinary deadline for that lab, the other for a resubmission before
the final deadline.
If your first submission does not build or does not pass the testsuite,
you will just get //fails testsuite// as grading.

% Note: **You have to submit //something// by the first deadline**,
% otherwise Fire will not allow a (re)submission for the final deadline.
% (In the worst case, if you absolutely did not manage to work on the lab
% before the first deadline, submit an empty solution.)

As part of the grading, you may be asked to explain your solution in person
to a course teacher.  Be prepared to get a call for such an explanation meeting.
In particular, make sure you understand all parts of the solution
(good documentation helps!).



% If you did not pass the labs by the end of the course you will have another opportunity in connection with the re-exam in April.
% The deadline will be Thursday, 22 March 2019.
% If you intend to re-submit labs then, please contact the course responsible via email on 15 March at the latest.
% If you need help you should also contact the course responsible, not the teaching assistants.
% Note however that you can only expect limited support.
% If you need a substantial amount of help, it is probably better to wait until next time the course is given.


=Exam=

The written exam determines the course grade, the usual grading scales apply:
Chalmers: 5, 4, 3, U; Gothenburg University: MVG, VG, G, U.

Exam dates:
 11 Jan 2024 am J,
 04 Apr 2024 am J,
 29 Aug 2024 pm J.

The exam tests the understanding of the course contents from a more high-level view,
e.g., the underlying theoretical concepts.
The exam has the same structure as these [old exams exams/]
(download as [archive exams.tgz]).

Further, here are some old
[exercises plt-book/ipl-book/course-exercises/exx.html]
and [solutions plt-book/ipl-book/course-exercises/sol.html]
to prepare for the exam.


=Literature=

The main book will be one that developed from earlier editions of this course:

: Aarne Ranta
  //Implementing Programming Languages. An Introduction to Compilers and Interpreters//,
  College Publications,
  London,
  2012.
  [Web page (with extra material and links to selling sites) plt-book/ipl-book/]

  Please also check the [errata https://github.com/andreasabel/plt-errata/] page
  (welcome to submit errata not covered there yet).


If you are really interested in the topic, for instance, if you want
to continue with the [Compiler Construction http://www.cse.chalmers.se/edu/course/TDA283/]
course, you should also consider //the Dragon book//,

: Aho, Lam, Sethi & Ullman
  //Compilers Principles, Techniques & Tools//,
  **Second edition**,
  Pearson/Addison Wesley
  2007.


Both books are available at web bookshops.
The main book will also be sold at Cremona.

A good (yet slightly dated) introduction to monads in Haskell, useful for implementing interpreters, type checkers, and compilers, is this article:

: Philip Wadler
  [Monads for functional programming https://homepages.inf.ed.ac.uk/wadler/papers/marktoberdorf/baastad.pdf].
  In //Advanced Functional Programming//,
  First International Spring School on Advanced Functional Programming Techniques, Båstad, Sweden, May 24-30, 1995.


It also contains an introduction to parser combinators.


=Software=

If you are solving the labs on your own Windows machine, you might have to obtain some
command-line developer tools stemming from the Unix world, like ``make``, ``tar``, etc.
(These are by default available on Linux and can be installed from Xcode on macOS.)
Windows from version 10 offers installation of a Linux distro via the
Windows Subsystem for Linux
([WSL https://en.wikipedia.org/wiki/Windows_Subsystem_for_Linux]).
Another popular option is [MSYS2 https://www.msys2.org/] which is also bundeled with
[Haskell stack https://docs.haskellstack.org/en/stable/developing_on_windows/].
% and [Cygwin https://www.cygwin.com/].

==BNFC==

We use the BNF Converter ([Homepage https://bnfc.digitalgrammars.com/] |
[Hackage https://hackage.haskell.org/package/BNFC] |
[Stackage https://www.stackage.org/package/BNFC] |
[GitHub https://github.com/BNFC/bnfc]).

Download and installation instructions at https://bnfc.digitalgrammars.com/.

% The latest version of BNFC (2.9.5) can be installed following these [instructions https://github.com/BNFC/bnfc/blob/master/README.md#installation].

When using the Java backend, you will need either
[ANTLR https://www.antlr.org/]
or the [CUP http://www2.cs.tum.edu/projects/cup/] libraries
and either
[JFLex https://jflex.de/] or the
[JLex https://www.cs.princeton.edu/~appel/modern/java/JLex/] libraries.
CUP has seen incompatible changes in its interface; thus, the version you need
may depend on your BNFC version.

===Java/CUP Instructions for BNFC ≥ 2.8.2 (uses CUP v0.11b)===

Download the JAVA archives for
[CUP v11b  https://github.com/BNFC/bnfc/raw/master/testing/data/java-cup-11b.jar],
[CUP v11b runtime  https://github.com/BNFC/bnfc/raw/master/testing/data/java-cup-11b-runtime.jar], and
[JLex https://github.com/BNFC/bnfc/raw/master/testing/data/JLex-1.2.6.jar].
%, contained in [javatools doc/javatools.jar].
Make sure they are placed in your classpath, for example (Linux / macOS)
by storing these jars in
``$HOME/java-lib/`` and adding the following line (or a suitable variant) to ``.bashrc``
(could also be ``.bash_profile`` or similar):
```
  export CLASSPATH=.:${HOME}/java-lib/java-cup-11b.jar:${HOME}/java-lib/java-cup-11b-runtime.jar:${HOME}/java-lib/JLex-1.2.6.jar:${CLASSPATH}
```
%The order matters since ``javatools.jar`` also contains an older version of CUP;
%make sure that ``javatools.jar`` comes last in the search path.

%//(Java/CUP Instructions for BNFC ≤ 2.8.1 (uses CUP v0.10k) can be found on [older versions of this page http://www.cse.chalmers.se/edu/year/2021/course/DAT151/index.html].)//

% ===Java/CUP Instructions for BNFC ≤ 2.8.1 (uses CUP v0.10k)===
%
% You can download pre-compiled versions [here doc/javatools.tgz].
% Make sure they are placed in your classpath, for example (Linux / macOS)
% by extracting to ``~/javatools/`` adding the following to ``.bashrc``:
%
% ```
%   export CLASSPATH=.:~/javatools/:~/javatools/Cup/:${CLASSPATH}
% ```
% On Debian-style Linux (like Ubuntu), the following now also works to install these libaries:
% ```
%   sudo apt install jlex cup
% ```
% Then the class path needs to be set as follows (bash):
% ```
%   export CLASSPATH=.:/usr/share/java/JLex.jar:/usr/share/java/cup.jar
% ```

=Student representatives=

[Student representatives https://student.portal.chalmers.se/en/chalmersstudies/courseinformation/courseevaluation/Pages/default.aspx]
for DAT151 Programming language technology.

|| Program | @student.chalmers.se | Name ||
| MPALG | kyletoft | Samuel Kyletoft |


%|  | ricarl | Carl Ridderstolpe |
%|  |        | Max Hvid Hansen |
%

% | MPALG | burmanj   | Joakim Burman     |
% | MPCSN | yitao           | Yitao Dong        |
% | MPALG | syedrahamatulla gmail com      | Rahamatullah Syed |
% | MPALG | erikbri         | Erik Brink        |
% |   | risnew | William Risne |
% %% No response
% %| MPALG | foraxel   | Axel Forsman      |
% %| MPALG | johalinu  | Linus Johansson   |
%
